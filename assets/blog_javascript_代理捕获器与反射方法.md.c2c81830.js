import{_ as s,c as a,o as n,d as e}from"./app.b79b95b0.js";const A=JSON.parse('{"title":"代理捕获器与反射方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"get()","slug":"get","link":"#get","children":[{"level":3,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作","link":"#拦截的操作","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数","link":"#捕获器处理程序参数","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式","link":"#捕获器不变式","children":[]}]},{"level":2,"title":"set()","slug":"set","link":"#set","children":[{"level":3,"title":"返回值","slug":"返回值-1","link":"#返回值-1","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-1","link":"#拦截的操作-1","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-1","link":"#捕获器处理程序参数-1","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-1","link":"#捕获器不变式-1","children":[]}]},{"level":2,"title":"has()","slug":"has","link":"#has","children":[{"level":3,"title":"返回值","slug":"返回值-2","link":"#返回值-2","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-2","link":"#拦截的操作-2","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-2","link":"#捕获器处理程序参数-2","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-2","link":"#捕获器不变式-2","children":[]}]},{"level":2,"title":"defineProperty()","slug":"defineproperty","link":"#defineproperty","children":[{"level":3,"title":"返回值","slug":"返回值-3","link":"#返回值-3","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-3","link":"#拦截的操作-3","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-3","link":"#捕获器处理程序参数-3","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-3","link":"#捕获器不变式-3","children":[]}]},{"level":2,"title":"getOwnPropertyDescriptor()","slug":"getownpropertydescriptor","link":"#getownpropertydescriptor","children":[{"level":3,"title":"返回值","slug":"返回值-4","link":"#返回值-4","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-4","link":"#拦截的操作-4","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-4","link":"#捕获器处理程序参数-4","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-4","link":"#捕获器不变式-4","children":[]}]},{"level":2,"title":"deleteProperty()","slug":"deleteproperty","link":"#deleteproperty","children":[{"level":3,"title":"返回值","slug":"返回值-5","link":"#返回值-5","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-5","link":"#拦截的操作-5","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-5","link":"#捕获器处理程序参数-5","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-5","link":"#捕获器不变式-5","children":[]}]},{"level":2,"title":"ownKeys()","slug":"ownkeys","link":"#ownkeys","children":[{"level":3,"title":"返回值","slug":"返回值-6","link":"#返回值-6","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-6","link":"#拦截的操作-6","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-6","link":"#捕获器处理程序参数-6","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-6","link":"#捕获器不变式-6","children":[]}]},{"level":2,"title":"getPrototypeOf()","slug":"getprototypeof","link":"#getprototypeof","children":[{"level":3,"title":"返回值","slug":"返回值-7","link":"#返回值-7","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-7","link":"#拦截的操作-7","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-7","link":"#捕获器处理程序参数-7","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-7","link":"#捕获器不变式-7","children":[]}]},{"level":2,"title":"setPrototypeOf()","slug":"setprototypeof","link":"#setprototypeof","children":[{"level":3,"title":"返回值","slug":"返回值-8","link":"#返回值-8","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-8","link":"#拦截的操作-8","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-8","link":"#捕获器处理程序参数-8","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-8","link":"#捕获器不变式-8","children":[]}]},{"level":2,"title":"isExtensible()","slug":"isextensible","link":"#isextensible","children":[{"level":3,"title":"返回值","slug":"返回值-9","link":"#返回值-9","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-9","link":"#拦截的操作-9","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-9","link":"#捕获器处理程序参数-9","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-9","link":"#捕获器不变式-9","children":[]}]},{"level":2,"title":"preventExtensions()","slug":"preventextensions","link":"#preventextensions","children":[{"level":3,"title":"返回值","slug":"返回值-10","link":"#返回值-10","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-10","link":"#拦截的操作-10","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-10","link":"#捕获器处理程序参数-10","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-10","link":"#捕获器不变式-10","children":[]}]},{"level":2,"title":"apply()","slug":"apply","link":"#apply","children":[{"level":3,"title":"返回值","slug":"返回值-11","link":"#返回值-11","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-11","link":"#拦截的操作-11","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-11","link":"#捕获器处理程序参数-11","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-11","link":"#捕获器不变式-11","children":[]}]},{"level":2,"title":"construct()","slug":"construct","link":"#construct","children":[{"level":3,"title":"返回值","slug":"返回值-12","link":"#返回值-12","children":[]},{"level":3,"title":"拦截的操作","slug":"拦截的操作-12","link":"#拦截的操作-12","children":[]},{"level":3,"title":"捕获器处理程序参数","slug":"捕获器处理程序参数-12","link":"#捕获器处理程序参数-12","children":[]},{"level":3,"title":"捕获器不变式","slug":"捕获器不变式-12","link":"#捕获器不变式-12","children":[]}]}],"relativePath":"blog/javascript/代理捕获器与反射方法.md","lastUpdated":1675170931000}'),l={name:"blog/javascript/代理捕获器与反射方法.md"},o=e(`<h1 id="代理捕获器与反射方法" tabindex="-1">代理捕获器与反射方法 <a class="header-anchor" href="#代理捕获器与反射方法" aria-hidden="true">#</a></h1><p>代理可以捕获 13 种不同的基本操作。这些操作有各自不同的反射 API 方法、参数、关联 ECMAScript 操作和不变式。</p><h2 id="get" tabindex="-1"><code>get()</code> <a class="header-anchor" href="#get" aria-hidden="true">#</a></h2><p><code>get()</code> 捕获器会在获取属性值的操作中被调用。对应的反射 API 方法为 <code>Reflect.get()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// get()</span></span>
<span class="line"><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-hidden="true">#</a></h3><p>返回值无限制</p><h3 id="拦截的操作" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作" aria-hidden="true">#</a></h3><ul><li><code>proxy.property</code></li><li><code>proxy[property]</code></li><li><code>Object.create(proxy)[property]</code></li><li><code>Reflect.get(proxy, property, receiver)</code></li></ul><h3 id="捕获器处理程序参数" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串属性</li><li><code>receiver</code>：代理对象或继承代理对象的对象</li></ul><h3 id="捕获器不变式" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式" aria-hidden="true">#</a></h3><p>如果 <code>target.property</code> 不可写且不可配置，则处理程序返回的值必须与 <code>target.property</code> 匹配。</p><p>如果 <code>target.property</code> 不可配置且 <code>[[Get]]</code> 特性为 <code>undefined</code>，处理程序的返回值也必须是 <code>undefined</code>。</p><h2 id="set" tabindex="-1"><code>set()</code> <a class="header-anchor" href="#set" aria-hidden="true">#</a></h2><p><code>set()</code> 捕获器会在设置属性值的操作中被调用。对应的反射 API 方法为 <code>Reflect.set()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">receiver</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// set()</span></span>
<span class="line"><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a></h3><p>返回 <code>true</code> 标识成功；返回 <code>false</code> 表示失败，严格模式下会抛出 <code>TypeError</code>。</p><h3 id="拦截的操作-1" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-1" aria-hidden="true">#</a></h3><ul><li><code>Proxy.property = value</code></li><li><code>proxy[property] = value</code></li><li><code>Object.create(proxy)[property] = value</code></li><li><code>Reflect.set(proxy, property, value, receiver)</code></li></ul><h3 id="捕获器处理程序参数-1" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-1" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串键属性</li><li><code>value</code>：要赋给属性的值</li><li><code>receiver</code>：接受最初赋值的对象</li></ul><h3 id="捕获器不变式-1" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-1" aria-hidden="true">#</a></h3><p>如果 <code>target.property</code> 不可写切不可配置，则不能修改目标属性的值。</p><p>如果 <code>target.property</code> 不可配置且 <code>[[Set]]</code> 特性为 <code>undefined</code>，则不能修改目标属性的值。</p><p>在严格模式下，处理程序中返回 <code>false</code> 会抛出 <code>TypeError</code>。</p><h2 id="has" tabindex="-1"><code>has()</code> <a class="header-anchor" href="#has" aria-hidden="true">#</a></h2><p><code>has()</code> 捕获器会在 <code>in</code> 操作符中被调用。对应的反射 API 方法为 <code>Reflect.has()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">has</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">has()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// has()</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> proxy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a></h3><p><code>has()</code> 必须返回布尔值，表示属性是否存在。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-2" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-2" aria-hidden="true">#</a></h3><ul><li><code>property in proxy</code></li><li><code>property in Object.create(proxy)</code></li><li><code>with(proxy) { (property); }</code></li><li><code>Reflect.has(proxy, property)</code></li></ul><h3 id="捕获器处理程序参数-2" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-2" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串键属性</li></ul><h3 id="捕获器不变式-2" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-2" aria-hidden="true">#</a></h3><p>如果 <code>target.property</code> 存在且不可配置，则处理程序必须返回 <code>true</code>。</p><p>如果 <code>target.property</code> 存在且目标对象不可扩展，则处理程序必须返回 <code>true</code>。</p><h2 id="defineproperty" tabindex="-1"><code>defineProperty()</code> <a class="header-anchor" href="#defineproperty" aria-hidden="true">#</a></h2><p><code>defineProperty()</code> 捕获器会在 <code>Object.defineProperty()</code> 中被调用。对应的反射 API 方法为 <code>Reflect.defineProperty()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">defineProperty</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">descriptor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">defineProperty()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// defineProperty()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-hidden="true">#</a></h3><p><code>defineProperty()</code> 必须返回布尔值，表示属性是否定义成功。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-3" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-3" aria-hidden="true">#</a></h3><ul><li><code>Object.defineProperty(proxy, property, descriptor)</code></li><li><code>Reflect.defineProperty(proxy, property, descriptor)</code></li></ul><h3 id="捕获器处理程序参数-3" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-3" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串键属性</li><li><code>descriptor</code>：包含可选的 <code>enumerable</code>、<code>configurable</code>、<code>writable</code>、<code>value</code>、<code>get</code> 和 <code>set</code> 定义的对象</li></ul><h3 id="捕获器不变式-3" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-3" aria-hidden="true">#</a></h3><p>如果目标对象不可扩展，则无法定义属性。</p><p>如果目标对象有一个可配置的属性，则不能添加同名的不可配置属性。</p><p>如果目标有一个不可配置的属性，则不能添加同名的可配置属性。</p><h2 id="getownpropertydescriptor" tabindex="-1"><code>getOwnPropertyDescriptor()</code> <a class="header-anchor" href="#getownpropertydescriptor" aria-hidden="true">#</a></h2><p><code>getOwnPropertyDescriptor()</code> 捕获器会在 <code>Object.getOwnPropertyDescriptor()</code> 中被调用。对应的反射 API 为 <code>Reflect.getOwnPropertyDescriptor()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getOwnPropertyDescriptor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">descriptor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">getOwnPropertyDescriptor()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// getOwnPropertyDescriptor()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-hidden="true">#</a></h3><p><code>getOwnPropertyDescriptor()</code> 必须返回对象，或者在属性不存在时返回 <code>undefined</code>。</p><h3 id="拦截的操作-4" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-4" aria-hidden="true">#</a></h3><ul><li><code>Object.getOwnPropertyDescriptor(proxy, property)</code></li><li><code>Reflect.getOwnPropertyDescriptor(proxy, property)</code></li></ul><h3 id="捕获器处理程序参数-4" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-4" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串键属性</li></ul><h3 id="捕获器不变式-4" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-4" aria-hidden="true">#</a></h3><p>如果自有的 <code>target.property</code> 存在且不可配置，则处理程序必须返回一个表示该属性存在的对象。</p><p>如果自有的 <code>target.property</code> 存在且可配置，则处理程序必须返回表示该属性可配置的对象。</p><p>如果 <code>target.property</code> 不存在且 <code>target</code> 不可扩展，则处理程序必须返回 <code>undefined</code> 表示该属性不存在。</p><p>如果 <code>target.property</code> 不存在，则处理程序不能返回表示该属性可配置的对象。</p><h2 id="deleteproperty" tabindex="-1"><code>deleteProperty()</code> <a class="header-anchor" href="#deleteproperty" aria-hidden="true">#</a></h2><p><code>deleteProperty()</code> 捕获器会在 <code>delete</code> 操作符中被调用。对应的反射 API 方法为 <code>Reflect.deleteProperty()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deleteProperty</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">property</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deleteProperty()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deleteProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// deleteProperty()</span></span>
<span class="line"><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-hidden="true">#</a></h3><p><code>deleteProperty()</code> 必须返回布尔值，表示删除属性是否成功。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-5" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-5" aria-hidden="true">#</a></h3><ul><li><code>delete proxy.property</code></li><li><code>delete proxy[property]</code></li><li><code>Reflect.deleteProperty(proxy, property)</code></li></ul><h3 id="捕获器处理程序参数-5" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-5" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>property</code>：引用的目标对象上的字符串键属性</li></ul><h3 id="捕获器不变式-5" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-5" aria-hidden="true">#</a></h3><p>如果自有的 <code>target.property</code> 存在且不可配置，则处理程序不能删除这个属性。</p><h2 id="ownkeys" tabindex="-1"><code>ownKeys()</code> <a class="header-anchor" href="#ownkeys" aria-hidden="true">#</a></h2><p><code>ownKeys()</code> 捕获器会在 <code>Object.keys()</code> 及类似方法中被调用。对应的反射 API 方法为 <code>Reflect.ownKeys()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ownKeys</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ownKeys()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ownKeys()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(proxy)</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-hidden="true">#</a></h3><p><code>ownKeys()</code> 必须返回包含字符串或符号的可枚举对象。</p><h3 id="拦截的操作-6" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-6" aria-hidden="true">#</a></h3><ul><li><code>Object.getOwnPropertyNames(proxy)</code></li><li><code>Object.getOwnPropertySymbols(proxy)</code></li><li><code>Object.keys(proxy)</code></li><li><code>Reflect.ownKeys(proxy)</code></li></ul><h3 id="捕获器处理程序参数-6" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-6" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li></ul><h3 id="捕获器不变式-6" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-6" aria-hidden="true">#</a></h3><p>返回的可枚举对象必须包含 <code>target</code> 的所有不可配置的自有属性。</p><p>如果 <code>target</code> 不可扩展，则返回可枚举对象必须准确地包含自有属性键。</p><h2 id="getprototypeof" tabindex="-1"><code>getPrototypeOf()</code> <a class="header-anchor" href="#getprototypeof" aria-hidden="true">#</a></h2><p><code>getPrototypeOf()</code> 捕获器会在 <code>Object.getPrototypeOf()</code> 中被调用。对应的反射 API 方法为 <code>Reflect.getPrototypeOf()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getPrototypeOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">getPrototypeOf()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// getPrototypeOf()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(proxy)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-7" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-7" aria-hidden="true">#</a></h3><p><code>getPrototypeOf()</code> 必须返回对象或 <code>null</code>。</p><h3 id="拦截的操作-7" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-7" aria-hidden="true">#</a></h3><ul><li><code>Object.getPrototypeOf(proxy)</code></li><li><code>Reflect.getPrototypeOf(proxy)</code></li><li><code>proxy.__proto__</code></li><li><code>Object.prototype.isPrototypeOf(proxy)</code></li><li><code>proxy instanceof Object</code></li></ul><h3 id="捕获器处理程序参数-7" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-7" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li></ul><h3 id="捕获器不变式-7" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-7" aria-hidden="true">#</a></h3><p>如果 <code>target</code> 不可扩展，则 <code>Object.getPrototypeOf(proxy)</code> 唯一有效的返回值就是 <code>Object.getPrototypeOf(target)</code> 的返回值。</p><h2 id="setprototypeof" tabindex="-1"><code>setPrototypeOf()</code> <a class="header-anchor" href="#setprototypeof" aria-hidden="true">#</a></h2><p><code>setPrototypeOf()</code> 捕获器会在 <code>Object.setPrototypeOf()</code> 中被调用。对应的反射 API 方法为 <code>Reflect.setPrototypeOf()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setPrototypeOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setPrototypeOf()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setPrototypeOf()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Object)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-8" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-8" aria-hidden="true">#</a></h3><p><code>setPrototypeOf()</code> 必须返回布尔值，表示原型赋值是否成功。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-8" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-8" aria-hidden="true">#</a></h3><ul><li><code>Object.setPrototypeOf(proxy)</code></li><li><code>Reflect.setPrototypeOf(proxy)</code></li></ul><h3 id="捕获器处理程序参数-8" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-8" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>prototype</code>：<code>target</code> 的替代原型，如果是顶级原型则为 <code>null</code></li></ul><h3 id="捕获器不变式-8" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-8" aria-hidden="true">#</a></h3><p>如果 <code>target</code> 不可扩展，则唯一有效的 <code>prototype</code> 参数就是 <code>Object.getPrototypeOf(target)</code> 的返回值。</p><h2 id="isextensible" tabindex="-1"><code>isExtensible()</code> <a class="header-anchor" href="#isextensible" aria-hidden="true">#</a></h2><p><code>isExtensible()</code> 捕获器会在 <code>Object.isExtensible()</code> 中被调用。对应的反射 API 方法为 <code>Reflect.isExtensible()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">isExtensible</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">isExtensible()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isExtensible</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// isExtensible()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isExtensible</span><span style="color:#A6ACCD;">(proxy)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-9" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-9" aria-hidden="true">#</a></h3><p><code>isExtensible()</code> 必须返回布尔值，表示 <code>target</code> 是否可扩展。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-9" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-9" aria-hidden="true">#</a></h3><ul><li><code>Object.isExtensible(proxy)</code></li><li><code>Reflect.isExtensible(proxy)</code></li></ul><h3 id="捕获器处理程序参数-9" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-9" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li></ul><h3 id="捕获器不变式-9" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-9" aria-hidden="true">#</a></h3><p>如果 <code>target</code> 可扩展，则处理程序必须返回 <code>true</code>。</p><p>如果 <code>target</code> 不可扩展，则处理程序必须返回 <code>false</code>。</p><h2 id="preventextensions" tabindex="-1"><code>preventExtensions()</code> <a class="header-anchor" href="#preventextensions" aria-hidden="true">#</a></h2><p><code>preventExtensions()</code> 捕获器会在 <code>Object.preventExtensions()</code> 中被调用。对应的反射 API 方法为 <code>Reflect.preventExtensions()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preventExtensions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preventExtensions()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventExtensions</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// preventExtensions()</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventExtensions</span><span style="color:#A6ACCD;">(proxy)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-10" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-10" aria-hidden="true">#</a></h3><p><code>preventExtensions()</code> 必须返回布尔值，表示 <code>target</code> 是否已经不可扩展。返回非布尔值会被转型为布尔值。</p><h3 id="拦截的操作-10" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-10" aria-hidden="true">#</a></h3><ul><li><code>Object.preventExtensions(proxy)</code></li><li><code>Reflect.preventExtensions(proxy)</code></li></ul><h3 id="捕获器处理程序参数-10" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-10" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li></ul><h3 id="捕获器不变式-10" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-10" aria-hidden="true">#</a></h3><p>如果 <code>Object.preventExtensions(proxy)</code> 是 <code>false</code>，则处理程序必须返回 <code>true</code>。</p><h2 id="apply" tabindex="-1"><code>apply()</code> <a class="header-anchor" href="#apply" aria-hidden="true">#</a></h2><p><code>apply()</code> 捕获器会在调用函数时被调用。对应的反射 API 方法为 <code>Reflect.apply()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">thisArg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">arguments</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apply()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventExtensions</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// apply()</span></span>
<span class="line"><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-11" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-11" aria-hidden="true">#</a></h3><p>返回值无限制。</p><h3 id="拦截的操作-11" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-11" aria-hidden="true">#</a></h3><ul><li><code>proxy(...argumentsList)</code></li><li><code>Function.prototype.apply(thisArg, argumentsList)</code></li><li><code>Function.prototype.call(thisArg, ...argumentsList)</code></li><li><code>Reflect.apply(target, thisArg, ...argumentsList)</code></li></ul><h3 id="捕获器处理程序参数-11" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-11" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标对象</li><li><code>thisArg</code>：调用函数时的 <code>this</code> 参数</li><li><code>argumentsList</code>：调用函数时的参数列表</li></ul><h3 id="捕获器不变式-11" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-11" aria-hidden="true">#</a></h3><p><code>target</code> 必须是一个函数对象。</p><h2 id="construct" tabindex="-1"><code>construct()</code> <a class="header-anchor" href="#construct" aria-hidden="true">#</a></h2><p><code>construct()</code> 捕获器会在 <code>new</code> 操作符中被调用。对应的反射 API 方法为 <code>Reflect.construct()</code>。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(myTarget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">construct</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argumentsList</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">newTarget</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">construct()</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">construct</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// construct()</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="返回值-12" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-12" aria-hidden="true">#</a></h3><p><code>construct()</code> 必须返回一个对象。</p><h3 id="拦截的操作-12" tabindex="-1">拦截的操作 <a class="header-anchor" href="#拦截的操作-12" aria-hidden="true">#</a></h3><ul><li><code>new proxy(...argumentsList)</code></li><li><code>Reflect.construct(target, argumentsList, newTarget)</code></li></ul><h3 id="捕获器处理程序参数-12" tabindex="-1">捕获器处理程序参数 <a class="header-anchor" href="#捕获器处理程序参数-12" aria-hidden="true">#</a></h3><ul><li><code>target</code>：目标构造函数</li><li><code>argumentsList</code>：传给目标构造函数的参数列表</li><li><code>newTarget</code>：最初被调用的构造函数</li></ul><h3 id="捕获器不变式-12" tabindex="-1">捕获器不变式 <a class="header-anchor" href="#捕获器不变式-12" aria-hidden="true">#</a></h3><p><code>target</code> 必须可以用作构造函数。</p>`,156),p=[o];function t(c,r,y,i,D,d){return n(),a("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
