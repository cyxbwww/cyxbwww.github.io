import{_ as s,c as a,o as n,d as l}from"./app.d01900bb.js";const A=JSON.parse('{"title":"框架设计概览","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 权衡的艺术","slug":"_1-权衡的艺术","link":"#_1-权衡的艺术","children":[{"level":3,"title":"1.1 命令式与声明式","slug":"_1-1-命令式与声明式","link":"#_1-1-命令式与声明式","children":[]},{"level":3,"title":"1.2 性能与可维护性的权衡","slug":"_1-2-性能与可维护性的权衡","link":"#_1-2-性能与可维护性的权衡","children":[]},{"level":3,"title":"1.3 虚拟 DOM 的性能","slug":"_1-3-虚拟-dom-的性能","link":"#_1-3-虚拟-dom-的性能","children":[]},{"level":3,"title":"1.4 运行时和编译时","slug":"_1-4-运行时和编译时","link":"#_1-4-运行时和编译时","children":[]},{"level":3,"title":"1.5 总结","slug":"_1-5-总结","link":"#_1-5-总结","children":[]}]}],"relativePath":"book/Vue.js设计与实现/框架设计概览.md","lastUpdated":1678369478000}'),p={name:"book/Vue.js设计与实现/框架设计概览.md"},o=l(`<h1 id="框架设计概览" tabindex="-1">框架设计概览 <a class="header-anchor" href="#框架设计概览" aria-hidden="true">#</a></h1><h2 id="_1-权衡的艺术" tabindex="-1">1. 权衡的艺术 <a class="header-anchor" href="#_1-权衡的艺术" aria-hidden="true">#</a></h2><h3 id="_1-1-命令式与声明式" tabindex="-1">1.1 命令式与声明式 <a class="header-anchor" href="#_1-1-命令式与声明式" aria-hidden="true">#</a></h3><p>从范式上看，视图层框架通常分为命令式和声明式。</p><p>早些时候流行的 jQuery 就是典型的命令式框架。命令式框架的一大特点就是<strong>关注过程</strong>。例如我们把下面这段话翻译成对应的代码：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">- 获取 id 为 app 的 div 标签</span></span>
<span class="line"><span style="color:#A6ACCD;">- 它的文本内容为 hello world</span></span>
<span class="line"><span style="color:#A6ACCD;">- 为其绑定点击事件</span></span>
<span class="line"><span style="color:#A6ACCD;">- 当点击时弹出提示：ok</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>对应的代码为：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 获取 div</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 设置文本内容</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 绑定点击事件</span></span>
<span class="line"></span></code></pre></div><p>以上是 jQuery 的代码示例，我们再用原生 JavaScript 来实现同样的功能：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取 div</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置文本内容</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 绑定点击事件</span></span>
<span class="line"></span></code></pre></div><p>自然语言描述能与代码产生一一对应的关系，代码本身描述的是“做事的过程”，这符合我们的逻辑直觉。</p><p>声明式框架更加<strong>关注结果</strong>。结合 Vue.js，我们可以这样实现上面自然语言描述的功能：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这段类 HTML 的模板就是 Vue.js 实现上面功能的方式。可以看到这里提供的是一个“结果”，实现该“结果”的<strong>过程</strong>则是由 Vue.js 帮我们完成的。换句话说，Vue.js 帮我们封装了<strong>过程</strong>。因此，我们能够猜到 Vue.js 的内部实现一定是<strong>命令式</strong>的，而暴露给用户的却更加<strong>声明式</strong>。</p><h3 id="_1-2-性能与可维护性的权衡" tabindex="-1">1.2 性能与可维护性的权衡 <a class="header-anchor" href="#_1-2-性能与可维护性的权衡" aria-hidden="true">#</a></h3><p><strong>声明式代码的性能不优于命令式代码的性能</strong>。假设我们要将 <code>div</code> 标签的文本内容修改为 hello vue3，可以使用命令式代码实现：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello vue3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>理论上命令式代码可以做到极致的性能优化，因为我们明确知道哪些发生了变更，只做必要的修改就行了。但是声明式代码不一定能做到这一点，因为它描述的是结果：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 之前 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello world</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 之后 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hello vue3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>对于框架来说，为了实现最优的更新性能，它需要找到前后的差异并指更新变化的地方，但是最终完成这次更新的代码仍然是：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hellow vue3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 直接修改</span></span>
<span class="line"></span></code></pre></div><p>如果我们把直接修改的性能消耗定义为 A，把找出差异的性能消耗定义为 B，那么有：</p><ul><li>命令式代码的更新性能消耗 = A</li><li>声明式代码的更新性能消耗 = B + A</li></ul><p>声明式代码会比命令式代码多出找出差异的性能消耗，因此最理想的情况是，当找出差异的性能消耗为 0 时，声明式代码与命令式代码的性能相同，但是无法做到超越，<strong>毕竟框架本身就是封装了命令式代码才实现了面向用户的声明式</strong>。</p><p>Vue.js 选择声明式的设计方案原因在于可维护性更强。在采用命令式代码开发的时候，我们需要维护实现目标的整个<strong>过程</strong>，包括要手动完成 DOM 元素的创建、更新、删除等工作。而声明式代码展示的就是我们要的<strong>结果</strong>。</p><p>这体现了在框架设计上要做出的关于可维护性与性能之间的权衡。在采用声明式提升可维护性的同时，性能就会有一定的损失，而框架设计者要做的就是：<strong>在保持可维护性的同时让新跟那个损失最小化</strong>。</p><h3 id="_1-3-虚拟-dom-的性能" tabindex="-1">1.3 虚拟 DOM 的性能 <a class="header-anchor" href="#_1-3-虚拟-dom-的性能" aria-hidden="true">#</a></h3><p>从上一章我们知道，<strong>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</strong>，因此，如果我们能够最小化<strong>找出差异的性能消耗</strong>，就可以让声明式代码的性能无限接近命令式代码的性能。而虚拟 DOM，就是为了<strong>最小化</strong>找出差异这一步的性能消耗而出现的。</p><p>前面所说的原生 JavaScript 实际上值得是像 <code>document.createElement</code> 之类的 DOM 操作方法，并不包含 <code>innerHTML</code> ，那么使用 <code>innerHTML</code> 操作页面和虚拟 DOM 相比性能如何？<code>innerHTML</code> 和 <code>document.createElement</code> 等 DOM 操作方法有何差异？</p><p>为了比较 <code>innerHTML</code> 和虚拟 DOM 的性能，我们需要了解它们的创建、更新页面的过程。对于 <code>innerHTML</code> 来说，为了创建页面，我们需要构造一段 HTML 字符串：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> html </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;div&gt;&lt;span&gt;...&lt;/span&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>接着将该字符串赋值给 DOM 元素的 <code>innerHTML</code> 属性：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>为了渲染出页面，首先要把字符串解析成 DOM 树，这是一个 DOM 层面的计算。涉及 DOM 的运算远比 JavaScript 层面的计算性能差。</p><h3 id="_1-4-运行时和编译时" tabindex="-1">1.4 运行时和编译时 <a class="header-anchor" href="#_1-4-运行时和编译时" aria-hidden="true">#</a></h3><h3 id="_1-5-总结" tabindex="-1">1.5 总结 <a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a></h3>`,36),e=[o];function t(c,r,D,y,i,F){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
